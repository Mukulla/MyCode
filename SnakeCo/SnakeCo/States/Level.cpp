#include "stdafx.h"

#include "Level.h"
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////КОНСТРУКТОР/////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Cls_Level::Cls_Level( int Difficulty001, int LevelIterator001, Cls_Timer &TimerTransfer )
{
	NumberLevel = LevelIterator001;
	//И сложность
	Difficulty = Difficulty001;
	//По умолчанию не показано
	ShowSubMenu = false;
	
	//Зацикленное значение и две основных кнопки
	NumberButton.SetMinMax( 0, 1 );
	Buttons = new Str_Object[ 2 ];
	
	//Номер направления
	CurrentDirection.Primis = 0;
	CurrentDirection.Secundus = 0;
	OldNumber = 0;
	//Количество очков по умолчанию
	ContScores = 0;

	GameState = 0;
	GameStarted = false;

	//Вычисляем значения счётчика относительно сложности
	MoveCounter.SetMinMax( 0, TimerTransfer.GetFPS() * 0.2 / ( Difficulty001 + 1 ) );
	
	CounterFood.SetMinMax( 0, 2 * TimerTransfer.GetFPS() / ( Difficulty001 + 1 ) );
	int a = 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////ДЕСТРУКТОР//////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Cls_Level::~Cls_Level()
{
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////ЗАГРУЗКА ИЗОБРАЖЕНИЙ////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Cls_Level::Loading( Str_Geminus< unsigned int > &FieldSizes )
{
	//Создаём поле
	MainField.Init( FieldSizes );	
	//Добавляем цифру к текущему названию уровня
	Title.Name = "LEVEL ";
	char Buffer[ 2 ];

	Title.Name += std::to_string( ( long double )NumberLevel );
	//Располгаем по центру
	Title.Koordinates.Primis = ( FieldSizes.Primis - Title.Name.length() ) / 2;
	Title.Koordinates.Secundus = 1;

	//Создаём СубМеню
	SubMenuField.Init( 12, 6 );
	//Подготавливаем поле для СубМеню
	SubMenuKoords.Primis = ( FieldSizes.Primis - SubMenuField.GetSizes().Primis ) / 2;
	SubMenuKoords.Secundus = ( FieldSizes.Secundus - SubMenuField.GetSizes().Secundus ) / 2;
	//Подготавливаем поле
	PrepareField( SubMenuField );

	//Создаём кнопки для СубМеню
	Buttons[ 0 ].Name = "Continue";
	Buttons[ 0 ].Koordinates.Primis = ( SubMenuField.GetSizes().Primis - Buttons[ 0 ].Name.length() ) / 2;
	Buttons[ 0 ].Koordinates.Secundus = 1;

	Buttons[ 1 ].Name = "Exit";
	Buttons[ 1 ].Koordinates.Primis = ( SubMenuField.GetSizes().Primis - Buttons[ 0 ].Name.length() ) / 2;
	Buttons[ 1 ].Koordinates.Secundus = Buttons[ 0 ].Koordinates.Secundus + 2;

	//Маркер для кнопок
	Marker.Name = "->";
	Marker.Koordinates.Primis = Buttons[ 0 ].Koordinates.Primis - Marker.Name.length();
	Marker.Koordinates.Secundus = Buttons[ 0 ].Koordinates.Secundus;

	//Копируем всех их в поле СубМеню
	CopyObjectToField( Buttons[ 0 ], SubMenuField );
	CopyObjectToField( Buttons[ 1 ], SubMenuField );
	CopyObjectToField( Marker, SubMenuField );

	//Получаем случайные размеры поля в зависимости от сложности
	Str_Geminus< unsigned int > SizesGameField;
	SizesGameField.Primis = RandomValue( FieldSizes.Primis * 0.2, FieldSizes.Primis * 0.25 * ( Difficulty + 1 ) );
	SizesGameField.Secundus = RandomValue( FieldSizes.Secundus * 0.5, FieldSizes.Secundus * ( 0.5 + 0.1 * ( Difficulty + 1 ) ) );
	//Сздаём и подготавливаем игровое поле
	GameField.Init( SizesGameField );

	//Смещаем его в центр
	GameFieldKoords.Primis = ( MainField.GetSizes().Primis - SizesGameField.Primis ) / 2;
	GameFieldKoords.Secundus = ( MainField.GetSizes().Secundus - SizesGameField.Secundus ) / 2;

	//Подготавливаем поле и копируем в него случайные элементы
	PrepareField( GameField );
	//GameField.SetValues( 'S' );
	AddBordresToField( 'X', GameField );

	//Итоговое количество препятствий
	int CountElement = 1;
	//Указываем в зависимости от сложности
	switch( Difficulty )
	{
	case 0:
		CountElement = 4;
		break;
	case 1:
		CountElement = 9;
		break;
	case 2:
		CountElement = 25;
		break;
	};
	//Добавлем в список случайные элементы
	Obstacles = AddRandomElementsToList( 'X', CountElement, GameField );
	CopyListToField( Obstacles, GameField );

	Directions.Init( 4 );
	Directions.SetValue( 0,  0, -1 );
	Directions.SetValue( 1,  1,  0 );
	Directions.SetValue( 2,  0,  1 );
	Directions.SetValue( 3, -1,  0 );
	//Массив с кодами клавиш по направлениям
	ArrayKeys.Init( 4 );
	ArrayKeys.SetValue( 0, 72 );
	ArrayKeys.SetValue( 1, 77 );
	ArrayKeys.SetValue( 2, 80 );
	ArrayKeys.SetValue( 3, 75 );

	//Располагаем по центру, если там что-то есть, то будет другое место
	Str_Object FirstElem;
	FirstElem.Name = "O";
	FirstElem.Koordinates.Primis = GameField.GetSizes().Primis / 2;
	FirstElem.Koordinates.Secundus = GameField.GetSizes().Secundus / 2;
	PlaceObjectToField( FirstElem, GameField );
	Snake.push_back( FirstElem );
	CopyListToField( Snake, GameField );

	//То, что увеличивает размер змеи
	//Координаты выбираем нулевые чтобы выбралось автоматом случайное положение объекта
	FoodUp.Name = "%";
	FoodUp.Koordinates.Primis = 0;
	FoodUp.Koordinates.Secundus = 0;
	PlaceObjectToField( FoodUp, GameField );

	Scores.Name = "Scores :" + std::to_string( ( long double )ContScores );
	Scores.Koordinates.Primis = FieldSizes.Primis - Scores.Name.length() - 10;
	Scores.Koordinates.Secundus = 1;
	CopyObjectToField( Scores, MainField );

	Greerings.Koordinates.Secundus = Title.Koordinates.Secundus + 2;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////ОБРАБОТКА НАЖАТИЙ КЛАВИАТУРЫ///////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Cls_Level::KeyBoardEvents( int SomeButton )
{
	if( SomeButton == 224 )
	{
		return;
	}
	if( SomeButton && !GameStarted )
	{
		GameStarted = true;
	}
	if( ShowSubMenu )
	{
		//Смещаем маркер для кнопок
		if( SomeButton == 75 || SomeButton == 72 )
		{
			NumberButton.AddValue( -1 );		
		}
		if( SomeButton == 80 || SomeButton == 77 )
		{
			NumberButton.AddValue( 1 );
		}

		PrepareField( SubMenuField );
		CopyObjectToField( Buttons[ 0 ], SubMenuField );
		CopyObjectToField( Buttons[ 1 ], SubMenuField );

		Marker.Koordinates.Secundus = Buttons[ NumberButton.GetValue() ].Koordinates.Secundus;
		CopyObjectToField( Marker, SubMenuField );

		if( NumberButton.GetValue() == 1 && SomeButton == 13 )
		{
			ChangeState( STATE_MENU, 1, 1, false );
		}

		if( NumberButton.GetValue() == 0 && SomeButton == 13 )
		{
			//Если игра выиграна
			if( GameState > 0 )
			{
				if( NumberLevel < 3 )
				{
					//Увеличиваем счётчик уровня
					++NumberLevel;		
					ChangeState( STATE_LEVEL, Difficulty, NumberLevel, false );
				}
				else
				{
					ChangeState( STATE_INTRO, Difficulty, NumberLevel, true );
				}
				return;
			}

			//Если игра проиграна
			if( GameState < 0 )
			{
				ChangeState( STATE_MENU, 1, 1, false );
			}

			ShowSubMenu = false;
			return;
		}
		//Escape
		if( SomeButton == 27 )
		{
			if( GameState != 0 )
			{
				ChangeState( STATE_MENU, 1, 1, false );
			}
			ShowSubMenu = false;
			return;
		}
	}
	else
	{
		//Escape
		if( SomeButton == 27 )
		{
			ShowSubMenu = true;
			return;
		}
		//Старое направление для нахождения противоположного движения
		Str_Geminus< int > OldDirection = CurrentDirection;
		//Получаем через сравнение с кодами клавиш вектор направления жвижения,
		int NumberDirection = Compare( SomeButton, ArrayKeys.GetPointerArray(), ArrayKeys.GetLength() );
		CurrentDirection = Directions.GetValue( NumberDirection );
		OldNumber = NumberDirection;
		//Если направление выбрано строго противоположное, оставляем старое
		if( OldDirection.Primis == - 1 * CurrentDirection.Primis && OldDirection.Secundus == CurrentDirection.Secundus || OldDirection.Primis == CurrentDirection.Primis && OldDirection.Secundus == - 1 *CurrentDirection.Secundus)
		{
			if( Snake.size() > 1 )
			{
				CurrentDirection = OldDirection;
			}
		}
		//Если новое направление другое, а змея ещё не сместилась, то оставляем старое направление
		if( OldNumber != NumberDirection && Compare( Snake.begin()->Koordinates, CurrentHearKoords ) )
		{
			NumberDirection = OldNumber;
		}
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////ОБРАБОТКА ЛОГИКИ ИГРЫ//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Cls_Level::Logic()
{	
	if( CurrentDirection.Primis != 0 || CurrentDirection.Secundus != 0 )
	{
		GameStarted = true;
	}
	if( ShowSubMenu )
	{
	}
	else
	{
		CounterFood.AddValue( -1 );
		if( CounterFood.GetValue() == CounterFood.GetMin() )
		{
			Str_Object Downer;
			Downer.Name = '.';
			Downer.Koordinates.Primis = 0;
			Downer.Koordinates.Secundus = 0;
			PlaceObjectToField( Downer, GameField );
			FoodDown.push_back( Downer );
			CopyListToField( FoodDown, GameField );
		}
		//Как только счётчик обнуляется выполняется смещение и проверки
		MoveCounter.AddValue( -1 );
		if( MoveCounter.GetValue() != MoveCounter.GetMax() )
		{
			return;
		}
		if( GameState == 0 )
		{
			Str_Object Head;
			Head.Koordinates = Snake.begin()->Koordinates;
			Head.Name = Snake.begin()->Name;

			bool AddElem = false;
		
			//Проверяем наличие под игроком увеличителя доинны
			if( Compare( Head.Koordinates, FoodUp.Koordinates ) ) 
			{
				AddElem = true;
				PlaceObjectToField( FoodUp, GameField );
				ContScores += RandomValue( 10, 30 );
				Scores.Name = "Scores :" + std::to_string( ( long double )ContScores );

				//Условия победы
				if( ContScores > 50 * ( Difficulty + 1 ) )
				{
					//Указываем сообщение
					Greerings.Name = "YOU WON, CLICK CONTINUE TO GO TO THE NEXT LEVEL";
					Greerings.Koordinates.Primis = ( MainField.GetSizes().Primis - Greerings.Name.length() ) / 2;

					++GameState;
					ShowSubMenu = true;
					return;
				}
			}
			//Проверяем не подобрана ли уменьшающая еда
			for( auto It = FoodDown.begin(); It != FoodDown.end(); ++It )
			{				
				if( Compare( Head.Koordinates, It->Koordinates ) ) 
				{
					//Удаляем последний элемент змеи
					Snake.pop_back();
					//И еду
					FoodDown.erase( It );

					if( Snake.empty() )
					{
						//Указываем сообщение
						Greerings.Name = "YOU LOST, CLICK ANY BUTTON TO GO TO MAIN MENU";
						Greerings.Koordinates.Primis = ( MainField.GetSizes().Primis - Greerings.Name.length() ) / 2;

						--GameState;
						GameStarted = false;
						ShowSubMenu = true;
						return;
					}
					break;
				}
			}
			//а затем проверяем по этому направлению наличие указанных в строке препятствий
			if( !ChekLet( Head, CurrentDirection, GameField, "XO" ) )
			{
				//Если был подобран элемент
				if( AddElem )
				{
					//Запоминаем координаты последнего элемента и записываем их после смещения
					Str_Object NewElem;
					for( auto Current = Snake.begin(); Current != Snake.end(); ++Current )
					{
						NewElem.Name = Current->Name;
						NewElem.Koordinates = Current->Koordinates;
					}
					MoveSnake( Snake, CurrentDirection );
					Snake.push_back( NewElem );
					int a = 0;
				}
				else
				{
					MoveSnake( Snake, CurrentDirection );
				}
				//Запоминаем текущие координаты
				CurrentHearKoords = Snake.begin()->Koordinates;
				//Перезаписываем игровое поле
				PrepareField( GameField );	
				AddBordresToField( 'X', GameField );
				CopyListToField( Obstacles, GameField );
				CopyObjectToField( FoodUp, GameField );
				CopyListToField( FoodDown, GameField );
				CopyListToField( Snake, GameField );					
			}
			else	
			{
				//Если смещения не произошло, то это значит, что змея упёрлась в препятствие
				if( Compare( CurrentHearKoords, Snake.begin()->Koordinates) && GameStarted )
				{
					//Указываем сообщение
					Greerings.Name = "YOU LOST, CLICK ANY BUTTON TO GO TO MAIN MENU";
					Greerings.Koordinates.Primis = ( MainField.GetSizes().Primis - Greerings.Name.length() ) / 2;

					--GameState;
					GameStarted = false;
					ShowSubMenu = true;
					return;
				}
			}
		}
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////ОТОБРАЗИТЬ МЕНЮ И ДРУГИХ ОБЪЕКТОВ///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void Cls_Level::Render()
{
	PrepareField( MainField );
	
	CopyObjectToField( Title, MainField );
	CopyObjectToField( Scores, MainField );

	

	if( ShowSubMenu )
	{	
		CopyFieldToField( SubMenuKoords, SubMenuField, MainField );
		if( GameState != 0 )
		{
			CopyObjectToField( Greerings, MainField );
		}
	}
	else
	{
		CopyFieldToField( GameFieldKoords, GameField, MainField );
	}

	std::cout << MainField.GetPointerArray();
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////