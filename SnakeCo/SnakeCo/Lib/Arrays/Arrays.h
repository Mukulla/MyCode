#ifndef ARRAYS_H
#define ARRAYS_H

#include "Lib/Structures.h"
#include "Lib/Functions001.h"

//Одномерный массив
//Четырёх типов bool, int, double, unigned char
template < typename Type001 >
class Cls_Array1D
{
private:
	//Создавался ли массив?
	//Если уже создавался, то старые данные удаляются
	bool IsCreated;
	//Длинна одномерного массива
	unsigned int Length;
	//Сам массив
	Type001 *Array;
public:

	//Конструктор
	Cls_Array1D();	
	//Деструктор
	~Cls_Array1D();	
	//Создать
	void Init( unsigned int Length001 );
	//Установить значение по индексу
	void SetValue( unsigned int i, Type001 Value001 );
	void SetValue( unsigned int i, Type001 *Value001 );
	//Установить значения в оказанных границах
	void SetValues( unsigned int iMin, unsigned int iMax, Type001 Value001 );
	void SetValues( Str_Geminus< unsigned int > Borders001, Type001 Value001 );
	//Указать всем значениям в массиве значение
	void SetValues( Type001 Value001 );
	//Получить длинну массива
	unsigned int GetLength();
	//Получить  значение по индексу
	Type001 GetValue( unsigned int i );
	//Отобразить массив в консоли
	//void ShowArray();
	//Получить указатель на массив
	Type001 *GetPointerArray();	
};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
//Одномерный массив структур с двумя значениями
template < typename Type002 >
class Cls_Array1DStrII
{
private:
	//Создавался ли массив?
	//Если уже создавался, то старые данные удаляются
	bool IsCreated;
	//Длинна одномерного массива
	unsigned int Length;
	//Сам массив
	Str_Geminus< Type002 > *Array;	
	//Нулевая структура
	Str_Geminus< Type002 > ZeroStr;
public:

	//Конструктор
	Cls_Array1DStrII();	
	//Деструктор
	~Cls_Array1DStrII();
	//Создать
	void Init( unsigned int Length001 );
	//Установить значение певрому значению структуры
	void SetPimis( unsigned int i, Type002 Value001 );
	//Установить значение второму значению структуры
	void SetSecundus( unsigned int i, Type002 Value001 );
	//Установить значения обеим элементам структуры по отдельности
	void SetValue( unsigned int i, Type002 Value001, Type002 Value002 );
	//Установить значение по индексу
	void SetValue( unsigned int i, Str_Geminus< Type002 > Value001 );
	void SetValue( unsigned int i, Str_Geminus< Type002 > *Value001 );
	//Установить значения в оказанных границах
	void SetValues( unsigned int iMin, unsigned int iMax, Type002 Value001, Type002 Value002 );
	void SetValues( Str_Geminus< unsigned int > Borders001, Str_Geminus< Type002 > Value001 );
	//Получить длинну массива
	unsigned int GetLength();
	//Получить  значение по индексу
	Str_Geminus< Type002 > GetValue( unsigned int i );
	//Получить указатель на массив
	Str_Geminus< Type002 > *GetPointerArray();	
};
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////
//Двухмерный массив
//Для ID в одном из вариантов
template < typename Type001 >
class Cls_Array2D
{
private:
	//Создавался ли массив?
	//Если уже создавался, то старые данные удаляются
	bool IsCreated;
	//Массив
	Type001 *Array;
	//Количество элементов массива
	unsigned int PointCount;
	//Размеры массива в формате,
	//удобном для понимания
	Str_Geminus< unsigned int > Sizes;
public:	
	//Конструктор
	Cls_Array2D();
	//Деструктор
	~Cls_Array2D();
	//Создать
	void Init( unsigned int SizeJ, unsigned int SizeI );
	void Init( Str_Geminus< unsigned int > &ArraySizes001 );
	//Установить значение	
	void SetValue( unsigned int SizeJ, unsigned int SizeI, Type001 Value001 );
	void SetValue( Str_Geminus< unsigned int > &Indexes, Type001 Value001 );
	//Добавить значение к значению элемента массива
	void AddValue( Str_Geminus< unsigned int > &Indexes, Type001 Value001 );
	//Установить значение в указанном диапазоне
	void SetValues( unsigned int  jMin, unsigned int  jMax, unsigned int  iMin, unsigned int  iMax, Type001 Value001 );
	void SetValues( Str_Quadrupla< unsigned int > &Borders001, Type001 Value001 );
	//Заполнить весь массив
	void SetValues( Type001 Value001 );
	//Получить количество элементов в массиве
	unsigned int GetPointCount();
	//Получить размеры массива
	Str_Geminus< unsigned int > GetSizes();
	//Получить значение
	Type001 GetValue( unsigned int SizeJ, unsigned int SizeI );
	Type001 GetValue( Str_Geminus< unsigned int > &Indexes );
	//Получить указатель на массив
	Type001 *GetPointerArray();
	//Показать массив в консоли
	//void ShowArray();	
};

#endif