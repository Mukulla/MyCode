#include "stdafx.h"

#include "Arrays.h"

template Cls_Array2D < bool >;
template Cls_Array2D < char >;
template Cls_Array2D < int >;
template Cls_Array2D < double >;

template Cls_Array2D < unsigned char >;
template Cls_Array2D < unsigned int >;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////КОНСТРУКТОР/////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template < typename Type001 >
Cls_Array2D< Type001 >::Cls_Array2D()
{
	//Указываем, что массив ещё не создавался
	IsCreated = false;
	//Длинна по умолчанию
	Sizes.Primis = 0;
	Sizes.Secundus = 0;
	//Общее количество элементов
	PointCount = 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////ДЕСТРУКТОР//////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template < typename Type001 >
Cls_Array2D< Type001 >::~Cls_Array2D()
{
	if( IsCreated )
	{
		delete[] Array;
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////СОЗДАТЬ МАССИВ//////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template < typename Type001 >
void Cls_Array2D< Type001 >::Init( unsigned int SizeJ, unsigned int SizeI )
{
	//Если массив уже создавался,
	//то удаляем текущие данные и отмечаем, что он не создавался
	if( IsCreated )
	{
		delete[] Array;
		Sizes.Primis = 0;
		Sizes.Secundus = 0;
		IsCreated = false;
	}
	//Защита от нулевой длины
	SetToOne( SizeI );
	SetToOne( SizeJ );
	//Указываем размеры
	Sizes.Primis = SizeJ;
	Sizes.Secundus = SizeI;
	//Вычисляем количество элементов
	PointCount = SizeI * SizeJ;
	//Создаём массив
	Array = new Type001[ PointCount ];
	for( unsigned int i = 0; i < PointCount; ++i )
	{
		Array[ i ] = 0;
	}
	//Указываем, что массив был создан
	IsCreated = true;
}
template < typename Type001 >
void Cls_Array2D< Type001 >::Init( Str_Geminus< unsigned int > &ArraySizes001 )
{
	//Если массив уже создавался,
	//то удаляем текущие данные и отмечаем, что он не создавался
	if( IsCreated )
	{
		delete[] Array;
		Sizes.Primis = -1;
		Sizes.Secundus = -1;
		IsCreated = false;
	}
	//Защита от нулевой длины
	SetToOne( ArraySizes001.Primis );
	SetToOne( ArraySizes001.Secundus );
	//Указываем размеры
	Sizes = ArraySizes001;
	//Вычисляем количество элементов
	PointCount = ArraySizes001.Primis * ArraySizes001.Secundus;
	//Создаём массив
	Array = new Type001[ PointCount ];
	for( unsigned int i = 0; i < PointCount; ++i )
	{
		Array[ i ] = 0;
	}
	//Указываем, что массив был создан
	IsCreated = true;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////УСТАНОВИТЬ ЗНАЧЕНИЕ/////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template < typename Type001 >
void Cls_Array2D< Type001 >::SetValue( unsigned int SizeJ, unsigned int SizeI, Type001 Value001 )
{
	//Проверяем на выход за пределы и указываем значение
	if( IsInBorders( SizeJ, Sizes.Primis ) && IsInBorders( SizeI, Sizes.Secundus ) )	
	{
		Array[ SizeI * Sizes.Primis + SizeJ ] = Value001;		
	}
}
template < typename Type001 >
void Cls_Array2D< Type001 >::SetValue( Str_Geminus< unsigned int > &Indexes, Type001 Value001 )
{
	//Проверяем на выход за пределы и указываем значение
	if( IsInBorders( Indexes.Primis, Sizes.Primis ) && IsInBorders( Indexes.Secundus, Sizes.Secundus ) )	
	{
		Array[ Indexes.Secundus * Sizes.Primis + Indexes.Primis ] = Value001;		
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////ДОБАВИТЬ ЗНАЧЕНИЕ///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template < typename Type001 >
void Cls_Array2D< Type001 >::AddValue( Str_Geminus< unsigned int > &Indexes, Type001 Value001 )
{
	//Проверяем на выход за пределы и указываем значение
	if( IsInBorders( Indexes.Primis, Sizes.Primis ) && IsInBorders( Indexes.Secundus, Sizes.Secundus ) )	
	{		
		Array[ Indexes.Secundus * Sizes.Primis + Indexes.Primis ] += Value001;		
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////УСТАНОВИТЬ ЗНАЧЕНИЯ/////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template < typename Type001 >
void Cls_Array2D< Type001 >::SetValues( unsigned int jMin, unsigned int jMax, unsigned int iMin, unsigned int iMax, Type001 Value001 )
{
	//Дабы не создавать iтое количество раз j
	Str_Geminus< unsigned int > Che;
	//Указать значения с проверкой на выход за пределы в SetValue
	for( Che.Secundus = iMin; Che.Secundus < iMax; ++Che.Secundus )
	{
		for( Che.Primis = jMin; Che.Primis < jMax; ++Che.Primis )
		{
			SetValue( Che, Value001 );
		}
	}
}
template < typename Type001 >
void Cls_Array2D< Type001 >::SetValues( Str_Quadrupla< unsigned int > &BordersObject001, Type001 Value001 )
{
	//Дабы не создавать iтое количество раз j
	Str_Geminus< unsigned int > Che;
	//Указать значения с проверкой на выход за пределы в SetValue
	for( Che.Secundus = BordersObject001.Tertium; Che.Secundus < BordersObject001.Quartus; ++Che.Secundus )
	{		
		for( Che.Primis = BordersObject001.Primis; Che.Primis < BordersObject001.Secundus; ++Che.Primis )
		{
			SetValue( Che, Value001 );
		}
	}
}
template < typename Type001 >
void Cls_Array2D< Type001 >::SetValues( Type001 Value001 )
{
	for( unsigned int i = 0; i < PointCount; ++i )
	{
		Array[ i ] = Value001;
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////ПОЛУЧИТЬ КОЛИЧЕСТВО ЭЛЕМЕНТОВ МАССИВА///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template < typename Type001 >
unsigned int Cls_Array2D< Type001 >::GetPointCount()
{
	return PointCount;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////ПОЛУЧИТЬ РАЗМЕРЫ МАССИВА////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template < typename Type001 >
Str_Geminus< unsigned int > Cls_Array2D< Type001 >::GetSizes()
{
	return Sizes;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////ПОЛУЧИТЬ ЗНАЧЕНИЯ///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template < typename Type001 >
Type001 Cls_Array2D< Type001 >::GetValue( unsigned int SizeJ, unsigned int SizeI )
{
	//Проверяем на выход за границы и получаем значение
	if( IsInBorders( SizeJ, Sizes.Primis ) && IsInBorders( SizeI, Sizes.Secundus ) )
	{
		return Array[ SizeI * Sizes.Primis + SizeJ ];
	}
	return 0;
}
template < typename Type001 >
Type001 Cls_Array2D< Type001 >::GetValue( Str_Geminus< unsigned int > &Indexes )
{
	//Проверяем на выход за границы и получаем значение
	if( IsInBorders( Indexes.Primis, Sizes.Primis ) && IsInBorders( Indexes.Secundus, Sizes.Secundus ) )
	{
		return Array[ Indexes.Secundus * Sizes.Primis + Indexes.Primis ];
	}
	return 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////ПОЛУЧИТЬ УКАЗАТЕЛЬ НА МАССИВ////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template < typename Type001 >
Type001 *Cls_Array2D< Type001 >::GetPointerArray()
{
	return Array;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////