#include "stdafx.h"

#include "Arrays.h"

template Cls_Array1DStrII < bool >;
template Cls_Array1DStrII < int >;
template Cls_Array1DStrII < double >;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////КОНСТРУКТОР/////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template < typename Type002 >
Cls_Array1DStrII< Type002 >::Cls_Array1DStrII()
{
	//Указываем, что массив ещё не создавался
	IsCreated = false;
	//По умолчанию длинна нулевая
	Length = 0;
	//Нулевая структура
	ZeroStr.Primis = 0;
	ZeroStr.Secundus = 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////ДЕСТРУКТОР//////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template < typename Type002 >
Cls_Array1DStrII< Type002 >::~Cls_Array1DStrII()
{
	if( IsCreated )
	{
		delete[] Array;
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////СОЗДАТЬ МАССИВ//////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template < typename Type002 >
void Cls_Array1DStrII< Type002 >::Init( unsigned int Length001 )
{
	//Если массив уже создавался,
	//то удаляем текущие данные и отмечаем, что он не создавался
	if( IsCreated )
	{
		delete[] Array;
		Length = 0;
		IsCreated = false;
	}
	//Защита от нулевой длины
	SetToOne( Length001 );	
	//Указываем значение длинны массива, в два раза больше из-за того, что структура двойная
	Length = Length001;
	//Создаём массив
	Array = new Str_Geminus< Type002 >[ Length001 ];
	for( unsigned int i = 0; i < Length001; ++i )
	{
		//Инициализируем
		Array[ i ].Primis = 0;
		Array[ i ].Secundus = 0;
	}
	//Указываем, что массив был создан
	IsCreated = true;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////УСТАНОВИТЬ ЗНАЧЕНИЕ ЭЛЕМЕНТУ ОТДЕЛЬНО///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template < typename Type002 >
void Cls_Array1DStrII< Type002 >::SetPimis( unsigned int i, Type002 Value001 )
{
	//Проверяем значение на выход за пределы
	if( IsInBorders( i, Length ) )
	{
		Array[ i ].Primis = Value001;
	}
}
template < typename Type002 >
void Cls_Array1DStrII< Type002 >::SetSecundus( unsigned int i, Type002 Value001 )
{
	//Проверяем значение на выход за пределы
	if( IsInBorders( i, Length ) )
	{
		Array[ i ].Secundus = Value001;
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////УСТАНОВИТЬ ЗНАЧЕНИЕ/////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template < typename Type002 >
void Cls_Array1DStrII< Type002 >::SetValue( unsigned int i, Type002 Value001, Type002 Value002 )
{
	//Проверяем значение на выход за пределы
	if( IsInBorders( i, Length ) )
	{
		Array[ i ].Primis = Value001;
		Array[ i ].Secundus = Value002;
	}
}
template < typename Type002 >
void Cls_Array1DStrII< Type002 >::SetValue( unsigned int i, Str_Geminus< Type002 > Value001 )
{
	//Проверяем значение на выход за пределы
	if( IsInBorders( i, Length ) )
	{
		Array[ i ] = Value001;
	}
}
template < typename Type002 >
void Cls_Array1DStrII< Type002 >::SetValue( unsigned int i, Str_Geminus< Type002 > *Value001 )
{
	//Проверяем значение на выход за пределы
	if( IsInBorders( i, Length ) )
	{
		Array[ i ] = *Value001;
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////УСТАНОВИТЬ ЗНАЧЕНИЯ/////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template < typename Type002 >
void Cls_Array1DStrII< Type002 >::SetValues( unsigned int iMin, unsigned int iMax, Type002 Value001, Type002 Value002 )
{	
	for( unsigned int i = iMin; i < iMax; ++i )
	{
		SetValue( i, Value001, Value002 );
	}	
}
template < typename Type002 >
void Cls_Array1DStrII< Type002 >::SetValues( Str_Geminus< unsigned int > Borders001, Str_Geminus< Type002 > Value001 )
{	
	for( unsigned int i = Borders001.Primis; i < Borders001.Secundus; ++i )
	{
		SetValue( i, Value001 );
	}	
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////ПОЛУЧИТЬ ДЛИННУ МАССИВА//////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template < typename Type002 >
unsigned int Cls_Array1DStrII< Type002 >::GetLength()
{
	return Length;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////ПОЛУЧИТЬ ЗНАЧЕНИЯ///////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template < typename Type002 >
Str_Geminus< Type002 > Cls_Array1DStrII< Type002 >::GetValue( unsigned int i )
{	
	//Проверяем значение на выход за пределы
	if( IsInBorders( i, Length ) )
	{		
		return Array[ i ];
	}
	//Если условие не выполняется,
	//передаём нулевую структуру	
	return ZeroStr;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////ОТОБРАЗИТЬ МАССИВ В КОНСОЛИ/////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
template < typename Type002 >
void Cls_Array1DStrII< Type002 >::ShowArray()
{
	for( int i = 0; i < Length; i++ )
	{
		PrintValue( Array[ i ] );
	}
	PrintEndL();
}*/
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////ПОЛУЧИТЬ УКАЗАТЕЛЬ НА МАССИВ////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template < typename Type002 >
Str_Geminus< Type002 > *Cls_Array1DStrII< Type002 >::GetPointerArray()
{
	return Array;
}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////