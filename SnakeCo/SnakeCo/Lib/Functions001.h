#ifndef FUNCTIONS001_H
#define FUNCTIONS001_H

#include "Lib/Structures.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////œ–Œ¬≈– ¿ Õ¿’Œ∆ƒ≈Õ»ﬂ «Õ¿◊≈Õ»ﬂ ¬ «¿ƒ¿ÕÕ€’ √–¿Õ»÷¿’ Œ“ÕŒ—»“≈À‹ÕŒ Õ”Àﬂ//////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template < typename Type001 >
bool IsInBorders( Type001 Value001, Type001 Max )
{
	if( Value001 >= 0 )
	{
		if( Value001 < Max )
		{
			return true;
		}
	}
	return false;
};
template bool IsInBorders( int, int );
template bool IsInBorders( unsigned int, unsigned int );
template bool IsInBorders( double, double );
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////œ–Œ¬≈– ¿ Õ¿’Œ∆ƒ≈Õ»ﬂ «Õ¿◊≈Õ»ﬂ ¬ «¿ƒ¿ÕÕ€’ √–¿Õ»÷¿’////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template < typename Type001 >
bool IsInBorders( Type001 Value001, Type001 Min, Type001 Max )
{
	if( Value001 >= Min )
	{
		if( Value001 < Max )
		{
			return true;
		}
	}
	return false;
};
template bool IsInBorders< int >( int, int, int );
template bool IsInBorders< unsigned int >( unsigned int, unsigned int, unsigned int );
template bool IsInBorders< double >( double, double, double );
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////œ–Œ¬≈– ¿ Õ¿’Œ∆ƒ≈Õ»ﬂ «Õ¿◊≈Õ»ﬂ ¬ «¿ƒ¿ÕÕ€’ √–¿Õ»÷¿’////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template < typename Type002 >
bool IsInBorders( Type002 Value001, Str_Borders1D < Type002 > &Broders001 )
{
	if( Value001 >= Broders001.Min )
	{
		if( Value001 < Broders001.Max )
		{
			return true;
		}
	}
	return false;
}
template bool IsInBorders( int, Str_Borders1D< int >& );
template bool IsInBorders( unsigned int, Str_Borders1D< unsigned int >& );
template bool IsInBorders( double, Str_Borders1D< double >& );
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////œ–Œ¬≈– ¿ –¿¬≈Õ“—¬¿////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template < typename Type001 >
bool IsEqual( Type001 Value001, Type001 Value002 )
{
	if( Value001 == Value002 )
	{
		return true;
	}
	return false;
};
template bool IsEqual< int >( int, int );
template bool IsEqual< unsigned int >( unsigned int, unsigned int );
template bool IsEqual< char >( char, char );
template bool IsEqual< char* >( char*, char* );
template bool IsEqual< unsigned char >( unsigned char, unsigned char );
template bool IsEqual< double >( double, double );
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////œ–Œ¬≈– ¿ Õ¿ Õ”À≈¬”ﬁ ƒÀ»ÕÕ”////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
template < typename Type001 >
void SetToOne( Type001 &Value )
{
	if( Value < 1 )
	{
		Value = 1;
	}
}
template void SetToOne< int >( int& );
template void SetToOne< unsigned int >( unsigned int& );
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////—À”◊¿…ÕŒ≈ ◊»—ÀŒ »« ƒ»¿œ¿«ŒÕ¿///////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
int RandomValue( int Min, int Max )
{	
	if( Min > Max )
	{
		Min = Max;
	}
	//œÓÎÛ˜‡ÂÏ Ï‡ÍÒËÏ‡Î¸ÌÓÂ ÁÌ‡˜ÂÌËÂ, ÍÓÚÓÓÂ ÏÓÊÂÚ ‚˚‰‡Ú¸ „ÂÌÂ‡ÚÓ ÓÚ ÌÛÎˇ
	int MaxFromZero = Max - Min;
	//œÂÂ‰‡∏Ï ˜ËÒÎÓ ËÁ ˝ÚÓ„Ó ‰Ë‡Ô‡ÁÓÌ‡ ÒÓ ÒÏÂ˘ÂÌËÂÏ Min
	return rand() % MaxFromZero + Min;
}*/
/*
template < Type001 > RandomValue< int >( int, int );
template < Type001 > RandomValue< unsigned int >( unsigned int, unsigned int );
template < Type001 > RandomValue< double >( double, double );*/

int RandomValue( int Min, int Max );

bool Compare( char Symbol001, char *ArrayToCompare );
//‘ÛÌÍˆËˇ ‰Î Ò‡‚ÌÂÌËˇ ÁÌ‡˜ÂÌËˇ ÍÓ‰‡ ÍÎ‡‚Ë¯˚ ÒÓ ÒÔËÒÍÓÏ ÍÓ‰Ó‚
int Compare( int Value001, unsigned int *Array, unsigned int Length );

#endif