#include "stdafx.h"

#include "GameFunctions.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void PrepareField( Cls_Array2D< char > &SomeField )
{
	Str_Geminus< unsigned int > Sizes = SomeField.GetSizes();	

	Str_Quadrupla< unsigned int > Borders;
	Borders.Primis = 0;
	Borders.Secundus = Sizes.Primis;
	Borders.Tertium = 0;
	Borders.Quartus = Sizes.Secundus;

	SomeField.SetValues( Borders, ' ' );

	//SomeField.SetValues( Borders, 'S' );	

	Borders.Primis = Sizes.Primis - 1;
	Borders.Secundus = Sizes.Primis;
	Borders.Tertium = 0;
	Borders.Quartus = Sizes.Secundus;

	SomeField.SetValues( Borders, '\n' );

	--Sizes.Primis;
	--Sizes.Secundus;

	SomeField.SetValue( Sizes, '\0' );
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CopyObjectToField( Str_Object &Oject, Cls_Array2D< char > &SomeField )
{
	//Длинна всей строки
	unsigned int Length = Oject.Name.length();
	//Итоговые координаты смещения
	Str_Geminus< unsigned int > TotalKoords = Oject.Koordinates;	
	for( unsigned int i = 0; i < Length; ++i )
	{
		if( Oject.Name[ i ] == '\0' )
		{
			SomeField.SetValue( TotalKoords, ' ' );
			break;
		}
		//Если символ переноса, то смещаем вниз на следующую строку
		if( Oject.Name[ i ] == '\n' )
		{
			SomeField.SetValue( TotalKoords, ' ' );
			TotalKoords.Primis = Oject.Koordinates.Primis;
			++TotalKoords.Secundus;
			continue;
		}		
		SomeField.SetValue( TotalKoords, Oject.Name[ i ] );
		//Смещаем горизонтальный индекс
		++TotalKoords.Primis;
	}

	//while( 
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CopyFieldToField( Str_Geminus< unsigned int > &OffSet, Cls_Array2D< char > &From, Cls_Array2D< char > &To )
{
	Str_Geminus< unsigned int > TotalKoordinates = OffSet;
	Str_Geminus< unsigned int > Che;
	for( Che.Secundus = 0; Che.Secundus < From.GetSizes().Secundus; ++Che.Secundus )
	{
		for( Che.Primis = 0; Che.Primis < From.GetSizes().Primis; ++Che.Primis )
		{
			if( From.GetValue( Che ) == '\n' || From.GetValue( Che ) == '\0' )
			{
				continue;
			}
			To.SetValue( TotalKoordinates, From.GetValue( Che ) );
			++TotalKoordinates.Primis;
		}
		TotalKoordinates.Primis = OffSet.Primis;
		++TotalKoordinates.Secundus;
	}
	int a = 0;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void AddBordresToField( char Symbol, Cls_Array2D< char > &GameField )
{
	//Заполняем границы
	Str_Quadrupla< unsigned int > Borders;
	Borders.Primis = 0;
	Borders.Secundus = GameField.GetSizes().Primis - 1;
	Borders.Tertium = 0;
	Borders.Quartus = 1;
	GameField.SetValues( Borders, Symbol );

	Borders.Primis = 0;
	Borders.Secundus = GameField.GetSizes().Primis - 1;
	Borders.Tertium = GameField.GetSizes().Secundus - 1;
	Borders.Quartus = GameField.GetSizes().Secundus;
	GameField.SetValues( Borders, Symbol );

	Borders.Primis = GameField.GetSizes().Primis - 2;
	Borders.Secundus = GameField.GetSizes().Primis - 1;
	Borders.Tertium = 0;
	Borders.Quartus = GameField.GetSizes().Secundus;
	GameField.SetValues( Borders, Symbol );

	Borders.Primis = 0;
	Borders.Secundus = 1;
	Borders.Tertium = 0;
	Borders.Quartus = GameField.GetSizes().Secundus;
	GameField.SetValues( Borders, Symbol );
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::list< Str_Object > AddRandomElementsToList( char Symbol, int Count, Cls_Array2D< char > &GameField )
{
	//Список для передачи
	std::list< Str_Object > Transfer;
	
	//Объект для добавления
	Str_Object Tempo;
	Tempo.Koordinates.Primis = 0;
	Tempo.Koordinates.Secundus = 0;
	Tempo.Name = Symbol;	

	//Итератор	
	unsigned int Iterator = 0;
	while( Iterator < Count )
	{
		//Начиная не с граничных индексов и заканчивая такими же
		//так как в граничных границы
		Tempo.Koordinates.Primis = RandomValue( 1, ( GameField.GetSizes().Primis - 3 ) );
		Tempo.Koordinates.Secundus = RandomValue( 1, ( GameField.GetSizes().Secundus - 3 ) );
		
		//Если по указанным координатам ничего не записано
		if( GameField.GetValue( Tempo.Koordinates ) != Symbol )
		{
			//Добавляем в список элемент
			Transfer.push_back( Tempo );
			//Увеличиваем итератор
			++Iterator;
		}
	}
	return Transfer;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void CopyListToField( std::list< Str_Object > List001, Cls_Array2D< char > &GameField )
{	
	for( auto It = List001.begin(); It != List001.end(); ++It )
    {
		CopyObjectToField( *It, GameField );
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void PlaceObjectToField( Str_Object &Oject, Cls_Array2D< char > &SomeField )
{
	//Если по месту записи символ не пробел
	if( SomeField.GetValue( Oject.Koordinates ) != ' ' )
	{
		bool Donne = false;
		//то выбираем случайные координаты и записываем по ним
		Str_Geminus< unsigned int > TempoKoords;
		TempoKoords.Primis = 0;
		TempoKoords.Secundus = 0;
		while( !Donne  )
		{
			TempoKoords.Primis = RandomValue( 1, ( SomeField.GetSizes().Primis - 3 ) );
			TempoKoords.Secundus = RandomValue( 1, ( SomeField.GetSizes().Secundus - 3 ) );
			if( SomeField.GetValue( TempoKoords ) == ' ' )
			{
				Oject.Koordinates = TempoKoords;
				CopyObjectToField( Oject, SomeField );
				Donne = true;
			}
		}
	}
	//Если же пробел, то просто записываем значение
	else
	{
		CopyObjectToField( Oject, SomeField );
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool ChekLet( Str_Object &Oject, Str_Geminus< int > &OffSet, Cls_Array2D< char > &SomeField, char *ArrayToCompare )
{
	//Вычисляем итоговые координаты для проверки
	Str_Geminus< unsigned int > Total;
	Total.Primis = Oject.Koordinates.Primis + OffSet.Primis;
	Total.Secundus = Oject.Koordinates.Secundus + OffSet.Secundus;
	//И проверяем наличие элемета из списка по направлению движения
	if( Compare( SomeField.GetValue( Total ), ArrayToCompare ) )
	{
		return true;
	}
	return false;
}
bool ChekLet( Str_Object &Oject, Cls_Array2D< char > &SomeField, char *ArrayToCompare )
{	
	if( Compare( SomeField.GetValue( Oject.Koordinates ), ArrayToCompare ) )
	{
		return true;
	}
	return false;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void MoveObject( Str_Object &Oject, Str_Geminus< int > &OffSet )
{
	Oject.Koordinates.Primis += OffSet.Primis;
	Oject.Koordinates.Secundus += OffSet.Secundus;
}
void MoveSnake( std::list< Str_Object > &Snake, Str_Geminus< int > &OffSet )
{
	//Копия списка для смещения
	std::list< Str_Object > TempoList = Snake;
	auto TempoIterator = TempoList.begin();
	auto Current = Snake.begin();
	//Смещаем голову
	Current->Koordinates.Primis += OffSet.Primis;
	Current->Koordinates.Secundus += OffSet.Secundus;
	
	//Если элементов больше одного
	while( Current != Snake.end() && TempoIterator != TempoList.end() )
	{
		//Смещаем
		++Current;
		if( Current == Snake.end() )
		{
			break;
		}
		//Получаем для следующего элемента старые координаты
		*Current = *TempoIterator;
		++TempoIterator;
	}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool Compare( Str_Geminus< unsigned int > First, Str_Geminus< unsigned int > Second )
{
	if( First.Primis == Second.Primis && First.Secundus == Second.Secundus )
	{
		return true;
	}
	return false;
}